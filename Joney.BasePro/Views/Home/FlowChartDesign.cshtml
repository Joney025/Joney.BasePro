
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>FlowChartDesign</title>
    <script src="~/Content/FlowDesign/gojs/go.v1.6.4.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery-1.8.2.js?2016"></script>
    <script type="text/javascript" src="~/Scripts/DragResize.js"></script>
    @*<script type="text/javascript" src="~/Scripts/jquery.contextmenu.r2.js"></script>
    <link href="~/Content/FlowDesign/css/bootstrap.css?2016" rel="stylesheet" type="text/css" />*@
    <link rel="stylesheet" type="text/css" href="~/Content/FlowDesign/css/goFlowChart.css?2016" />
    @Html.Partial("../Shared/_Layer")
    <script id="code" type="text/javascript">
        $(document).ready(function () {
            $("#btnUpdate").on("click", function (e) {
                console.log(e);
                $("#dragBox_Attribute").hide(500);
            });
            $("#btnClose").live("click", function (e) {
                $("#dragBox_Attribute").hide(500);
            });
        });
        var myDiagram = null;
        var linkData = null;
  function init() {
    var $g = go.GraphObject.make;  // for conciseness in defining templates

    myDiagram =$g(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
    {
        initialContentAlignment: go.Spot.Center,
        allowDrop: true,  // must be true to accept drops from the Palette
        "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
        "LinkRelinked": showLinkLabel,
        "animationManager.duration": 800, // slightly longer than default (600ms) animation
        "undoManager.isEnabled": true  // enable undo & redo
        
    });
      
    // when the document is modified, add a "*" to the title and enable the "Save" button
    myDiagram.addDiagramListener("Modified", function(e) {
      var button = document.getElementById("SaveButton");
      if (button) button.disabled = !myDiagram.isModified;
      var idx = document.title.indexOf("*");
      if (myDiagram.isModified) {
        if (idx < 0) document.title += "*";
      } else {
        if (idx >= 0) document.title = document.title.substr(0, idx);
      }
    });
    //元素点击事件：
    myDiagram.addDiagramListener("ObjectSingleClicked",function (e) {
        var part = e.subject.part;
        console.log(e.subject.part.data);
        if (!(part instanceof go.Link)) {
            showMessage("Clicked on " + part.data.key);
            $("#selActionBox").hide(500);
            $("#dragBox_Attribute").hide(300);
            $("#dragBox_Attribute").show(300);
            $("#dragBox_Attribute #txtTitle").val("节点编号" + part.data.__gohashid);
            $("#dragBox_Attribute #txtTitle2").val("步骤" + part.data.key);
            $("#dragBox_Attribute #txtTitle3").val("表单" + part.data.text);
            $("#dragBox_Attribute #txtTitle4").val("描述" + part.data.text);
        }
        if (part instanceof go.Link) {
            console.log(part);
            var txt = e.subject.part.data.from + "-" + e.subject.part.data.to;
            $("#selActionBox").hide(500);
            $("#dragBox_Attribute").hide(300);
            $("#txt_labelTitle").val(txt);
            $("#selActionBox").show(500);
            linkData = e.subject.part.data;
        }
    });
    myDiagram.addDiagramListener("ObjectContextClicked",function (e) {
          console.log("--ObjectContextClicked--");
          showMessage(e);
      });
    //画布双击事件：
    myDiagram.addDiagramListener("BackgroundDoubleClicked", function (e) {
        showMessage("Double-clicked at " + e.diagram.lastInput.documentPoint);
    });
    //画布黏贴事件：
    myDiagram.addDiagramListener("ClipboardPasted", function (e) {
        showMessage("Pasted " + e.diagram.selection.count + " parts");
    });
    //选择删除事件：
    myDiagram.addDiagramListener("SelectionDeleting",function (e) {
        if (e.diagram.selection.count > 1) {
            e.cancel = true;
            showMessage("Cannot delete multiple selected parts");
        }
    });
    
    myDiagram.addDiagramListener("LayoutCompleted", function (e) {
        console.log(e);
    });
    myDiagram.addDiagramListener("LinkReshaped", function (e) {
        console.log(e);
    });
    //模板数据：
    var nodeDataArray = [
      { key: "Alpha", text: "奎六", img: "../Images/t3.jpg" },
      { key: "Beta", group: "Omega",text:"李四",img:"../Images/t2.jpg" },
      { key: "Gamma", group: "Omega", text: "王五", img: "../Images/t4.jpg" },
      { key: "Omega", isGroup: true, text: "单元组"},
      { key: "Delta",text:"张三",img:"../Images/t1.jpg" }
    ];
    var linkDataArray = [
      { from: "Alpha", to: "Beta" },  // from outside the Group to inside it
      { from: "Beta", to: "Gamma" },  // this link is a member of the Group
      { from: "Omega", to: "Delta" }  // from the Group to a Node
    ];
    myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);

    // helper definitions for node templates
    function showMessage(s) {
        console.log(s);
    }

    function nodeStyle() {
      return [
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        {
          // the Node.location is at the center of each node
          locationSpot: go.Spot.Center,
          //isShadowed: true,
          //shadowColor: "#888",
          // handle mouse enter/leave events to show/hide the ports
          mouseEnter: function (e, obj) { showPorts(obj.part, true); },
          mouseLeave: function (e, obj) { showPorts(obj.part, false); }
        }
      ];
    }
      //创建锚点：
    function makePort(name, spot, output, input) {
      // the port is basically just a small circle that has a white stroke when it is made visible
      return $g(go.Shape, "Circle",
               {
                  fill: "transparent",
                  stroke: null,  // this is changed to "white" in the showPorts function
                  desiredSize: new go.Size(8, 8),
                  alignment: spot, alignmentFocus: spot,  // align the port on the main Shape
                  portId: name,  // declare this object to be a "port"
                  fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
                  fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
                  cursor: "pointer"  // show a different cursor to indicate potential link point
               });
    }

    // define the Node templates for regular nodes

    var lightText = 'whitesmoke';
      //节点元素：
    myDiagram.nodeTemplateMap.add("",  // the default category
      $g(go.Node, "Spot", nodeStyle(),//Spot,Vertical,Horizontal
        // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
        $g(go.Panel, "Auto",
          $g(go.Shape, "Rectangle",
            { fill: "#00A9C9", stroke: null },
            new go.Binding("figure", "figure")),
            //$g(go.Picture, { maxSize: new go.Size(50, 50) }, new go.Binding("source", "img")),
            
          $g(go.TextBlock,
            {
              font: "bold 11pt Helvetica, Arial, sans-serif",
              stroke: lightText,
              margin:8,//new go.Margin(8,5,5,5)
              maxSize: new go.Size(160,NaN),//NaN
              wrap: go.TextBlock.WrapFit,
              editable: true,
              isMultiline:true
            },
            new go.Binding("text").makeTwoWay())
        ),
        // four named ports, one on each side:
        makePort("T", go.Spot.Top, false, true),
        makePort("L", go.Spot.Left, true, true),
        makePort("R", go.Spot.Right, true, true),
        makePort("B", go.Spot.Bottom, true, false)
      ));
      //开始元素：
    myDiagram.nodeTemplateMap.add("Start",
      $g(go.Node, "Spot", nodeStyle(),
        $g(go.Panel, "Auto",
          $g(go.Shape, "Circle",{ minSize: new go.Size(40, 40), fill: "#79C900", stroke: null }),
          $g(go.TextBlock, "Start",{ font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
            new go.Binding("text"))
        ),
        // three named ports, one on each side except the top, all output only:
        makePort("L", go.Spot.Left, true, false),
        makePort("R", go.Spot.Right, true, false),
        makePort("B", go.Spot.Bottom, true, false)
      ));
      //结束元素：
    myDiagram.nodeTemplateMap.add("End",
      $g(go.Node, "Spot", nodeStyle(),
        $g(go.Panel, "Auto",
          $g(go.Shape, "Circle",{ minSize: new go.Size(40, 40), fill: "#DC3C00", stroke: null }),
          $g(go.TextBlock, "End",{ font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
            new go.Binding("text"))
        ),
        // three named ports, one on each side except the bottom, all input only:（锚点位置：T=top，L=left,R=right）
        makePort("T", go.Spot.Top, false, true),
        makePort("L", go.Spot.Left, false, true),
        makePort("R", go.Spot.Right, false, true)
      ));

      //备注元素：
    myDiagram.nodeTemplateMap.add("Comment",
      $g(go.Node, "Auto", nodeStyle(),
        $g(go.Shape, "File",{ fill: "#EFFAB4", stroke: null }),
        $g(go.TextBlock,
          {
            margin: 5,
            maxSize: new go.Size(200, NaN),
            wrap: go.TextBlock.WrapFit,
            textAlign: "center",
            editable: true,
            font: "bold 12pt Helvetica, Arial, sans-serif",
            stroke: '#454545'
          },
          new go.Binding("text").makeTwoWay())
        // no ports, because no links are allowed to connect with a comment
      ));


    // replace the default Link template in the linkTemplateMap
    myDiagram.linkTemplate =
      $g(go.Link,
        {
            routing: go.Link.AvoidsNodes,
            curve: go.Link.JumpOver,
            corner: 5,
            toShortLength: 4,
            relinkableFrom: true,
            relinkableTo: true,
            reshapable: true,
            resegmentable: true
        },
        new go.Binding("points").makeTwoWay(),
        $g(go.Shape,{ strokeWidth: 2},new go.Binding("stroke", "color")),
        $g(go.Shape,{ toArrow: "Standard",strokeWidth:2},new go.Binding("fill", "color"),new go.Binding("stroke","color"))
        
      );

     
    // Make link labels visible if coming out of a "conditional" node.
    // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
    function showLinkLabel(e) {
        var label = e.subject.findObject("LABEL");
        console.log(e.subject);
        //e.subject.Ug = 'red';
      if (label !== null) label.visible = (e.subject.fromNode.data.figure === "Diamond");
    }
    function linkInfo(d) {  // Tooltip info for a link data object
        return "Link:\nfrom " + d.from + " to " + d.to;
    }
    // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
    myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
    myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;

    refreshDrawing();  // load an initial diagram from some JSON text

    //工具栏：
    myPalette =
      $g(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
        {
          "animationManager.duration":500, // slightly longer than default (600ms) animation
          nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
          model: new go.GraphLinksModel([  // specify the contents of the Palette
            { text: "开始", category: "Start", figure: 'Ellipse' },//figure:图形
            { text: "任务", category:'Step'},
            { text: "步骤", category: "Task", figure: 'RoundedRectangle' },
            { text: "分支", category: "Branch", figure: "Diamond" },
            { text: "判断", category: "Hexagon", figure: "Hexagon", color: "lightblue" },
            { text: "结束", category: "End"},
            { text: "备注", category: "Comment"}
          ])
        });

  }

  // Make all ports on a node visible when the mouse is over the node
  function showPorts(node, show) {
    var diagram = node.diagram;
    if (!diagram || diagram.isReadOnly || !diagram.allowLink) return;
    node.ports.each(function(port) {
        port.stroke = (show ? "red" : null);//连接点的颜色
      });
  }


  // Show the diagram's model in JSON format that the user may edit
  function saveDrawing() {
      var jsonData = myDiagram.model.toJson();
      myDiagram.isModified = false;
      layer.msg(jsonData);
  }
 //草稿预存
  function draftDrawing() {
      document.getElementById("mySavedModel").value = myDiagram.model.toJson();
      myDiagram.isModified = false;
  }
  //刷新加载
  function refreshDrawing() {
      var viewData = document.getElementById("mySavedModel").value;// [];
      myDiagram.model = go.Model.fromJson(viewData);
  }
 //清空画布
  function clearDrawing() {
      //var viewData =[];
      //myDiagram.model = go.Model.fromJson(viewData);
      myDiagram.clear();
  }
        //测试：
  function ggg() {
      console.log("--测试--");
      console.log(linkData);

      //myDiagram.model.setDataProperty(linkData, "stroke", "red");
      //myDiagram.model.setKeyForLinkData(linkData, "description.test what it's");
      var data = linkData;
      myDiagram.startTransaction("change text");
      myDiagram.selection.each(function (node) {
          if (node instanceof go.Node) {  // ignore any selected Links and simple Parts
              // Examine and modify the data, not the Node directly.
              var data = node.data;
              // Call setDataProperty to support undo/redo as well as
              // automatically evaluating any relevant bindings.
              myDiagram.model.setDataProperty(data, "text", "测试。");
          }
      });
      myDiagram.commitTransaction("change text");
}

    </script>
</head>
<body onload="init()">
    <div id="sample">
        <h3>流程图：</h3>
        <div style="width:100%; white-space:nowrap;">
            <div style="display: inline-block; vertical-align: top; padding: 5px; width:120px">
                <div id="myPaletteDiv_2" style="border: dashed 1px gray; height: 720px;">
                    <div id="dragBox_tool" class="mxWindow" style="top:50px;left:-5px;">
                        <me class="mxWindowTitle" style="cursor:move;vertical-align:middle;text-align:center;"><span>工具栏</span></me>
                        <div class="mxWindowContent">
                            <ul>
                                <li><a id="abtn_saveDesign" onclick="saveDrawing();"><i class="i-save"></i><em>保存</em></a></li>
                                <li><a id="abtn_draftDesign" onclick="draftDrawing();"><i class="i-draft"></i><em>草稿</em></a></li>
                                <li><a id="abtn_refreshDesign" onclick="refreshDrawing();"><i class="i-refresh"></i><em>刷新</em></a></li>
                                <li><a id="abtn_clearDesign" onclick="clearDrawing();"><i class="i-clear"></i><em>清空</em></a></li>
                            </ul>
                            <hr class="hr-line" />
                            <div>
                                <div id="myPaletteDiv" style="border: solid 1px gray; height:545px"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="display: inline-block; vertical-align: top; padding: 5px; width:90%">
                <div id="myDiagramDiv" style="border: solid 1px gray; height: 720px"></div>
            </div>
        </div>

        <div id="dragBox_Attribute" class="mxWindow" style="top:50px;right:50px;">
            <me class="mxWindowTitle" style="cursor:move;vertical-align:middle;text-align:left;"><span>属性：</span></me>
            <div class="mxWindowContent">
                <ul>
                    <li><span>标题</span><input type="text" id="txtTitle" placeholder="显示标题" /></li>
                    <li><span>步骤</span><input type="text" id="txtTitle2" placeholder="步骤" /></li>
                    <li><span>表单</span><input type="text" id="txtTitle3" placeholder="表单" /></li>
                    <li><span>描述</span><input type="text" id="txtTitle4" placeholder="描述" /></li>
                </ul>
                <p>
                    <a id="btnUpdate" class="btn">更 新</a>
                    <a id="btnClose" class="btn">取 消</a>
                </p>
            </div>
        </div>
        <div id="selActionBox" style="display:none;">
            <div>
                <label>节点：</label>
                <input type="text" id="txt_labelTitle" value="" />
                <select id="selElem">
                    <option value="1">同意</option>
                    <option value="2">拒绝</option>
                </select>
            </div>
        </div>
        <div style="padding:10px;margin:5px 0;">
            <button id="btnTest" onclick="ggg()">Test</button>
            Diagram Model saved in JSON format:
            <textarea id="mySavedModel" style="width:100%;height:500px">
                { "class": "go.GraphLinksModel",
                "linkFromPortIdProperty": "fromPort",
                "linkToPortIdProperty": "toPort",
                "nodeDataArray": [
                {"category":"Comment", "loc":"360 -10", "text":"Kookie Brittle", "key":-13},
                {"key":-1, "category":"Start", "loc":"175 0", "text":"Start"},
                {"key":0, "loc":"0 77", "text":"Preheat oven to 375 F"},
                {"key":1, "loc":"175 100", "text":"In a bowl, blend: 1 cup margarine, 1.5 teaspoon vanilla, 1 teaspoon salt"},
                {"key":2, "loc":"175 190", "text":"Gradually beat in 1 cup sugar and 2 cups sifted flour"},
                {"key":3, "loc":"175 270", "text":"Mix in 6 oz (1 cup) Nestle's Semi-Sweet Chocolate Morsels"},
                {"key":4, "loc":"175 370", "text":"Press evenly into ungreased 15x10x1 pan"},
                {"key":5, "loc":"352 85", "text":"Finely chop 1/2 cup of your choice of nuts"},
                {"key":6, "loc":"175 440", "text":"Sprinkle nuts on top"},
                {"key":7, "loc":"175 500", "text":"Bake for 25 minutes and let cool"},
                {"key":8, "loc":"175 570", "text":"Cut into rectangular grid","bg":"red"},
                {"key":-2, "category":"End", "loc":"175 640", "text":"Enjoy!"}
                ],
                "linkDataArray": [
                {"from":1, "to":2, "fromPort":"B", "toPort":"T","color":"blue"},
                {"from":2, "to":3, "fromPort":"B", "toPort":"T","color":"blue"},
                {"from":3, "to":4, "fromPort":"B", "toPort":"T","color":"gray"},
                {"from":4, "to":6, "fromPort":"B", "toPort":"T","color":"blue"},
                {"from":6, "to":7, "fromPort":"B", "toPort":"T","color":"blue"},
                {"from":7, "to":8, "fromPort":"B", "toPort":"T","color":"yellow"},
                {"from":8, "to":-2, "fromPort":"B", "toPort":"T","color":"blue"},
                {"from":-1, "to":0, "fromPort":"B", "toPort":"T","color":"black"},
                {"from":-1, "to":1, "fromPort":"B", "toPort":"T","color":"blue"},
                {"from":-1, "to":5, "fromPort":"B", "toPort":"T","color":"green"},
                {"from":5, "to":4, "fromPort":"B", "toPort":"T","color":"blue"},
                {"from":0, "to":4, "fromPort":"difference", "toPort":"subtrahend","color":"red","status":true}
                ]}
            </textarea>
        </div>
    </div>
</body>
</html>
